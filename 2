import ccxt
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import asyncio
from telegram import Bot
from telegram.error import TelegramError

def fetch_binance_data(symbol, timeframe='1h', limit=100):
    try:
        binance = ccxt.binance()
        ohlcv = binance.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
        data = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        data['timestamp'] = pd.to_datetime(data['timestamp'], unit='ms')
        return data
    except Exception as e:
        print(f"Error fetching data: {e}")
        return pd.DataFrame()

def calculate_pivot_points(data):
    # Calculate pivot point and support/resistance levels
    last_row = data.iloc[-1]
    high = last_row['high']
    low = last_row['low']
    close = last_row['close']
    
    pivot_point = (high + low + close) / 3
    resistance1 = 2 * pivot_point - low
    support1 = 2 * pivot_point - high
    resistance2 = pivot_point + (high - low)
    support2 = pivot_point - (high - low)
    
    return pivot_point, resistance1, support1, resistance2, support2

def detect_breakout(data, resistance):
    breakout = data[data['close'] > resistance]
    return breakout

def plot_pivot_points(data, pivot_point, resistance1, support1, resistance2, support2, breakout, filename='pivot_breakout.png'):
    plt.figure(figsize=(12, 6))
    plt.plot(data['timestamp'], data['close'], label='Close Price')
    plt.axhline(pivot_point, color='gray', linestyle='--', label='Pivot Point')
    plt.axhline(resistance1, color='red', linestyle='--', label='Resistance 1')
    plt.axhline(support1, color='green', linestyle='--', label='Support 1')
    plt.axhline(resistance2, color='red', linestyle='-.', label='Resistance 2')
    plt.axhline(support2, color='green', linestyle='-.', label='Support 2')
    plt.scatter(breakout['timestamp'], breakout['close'], color='blue', label='Breakout Points')
    plt.xlabel('Timestamp')
    plt.ylabel('Price')
    plt.legend()
    plt.title('Pivot Points Breakout Detection')
    plt.savefig(filename)
    plt.show()

async def send_image_to_telegram(filename, token, chat_id):
    bot = Bot(token=token)
    try:
        with open(filename, 'rb') as photo:
            await bot.send_photo(chat_id=chat_id, photo=photo)
    except TelegramError as e:
        print(f"Error sending image to Telegram: {e}")

def main():
    symbol = 'BTC/USDT'
    timeframe = '1h'
    token = '7124807761:AAFeEIuLTN1VzLyunmVU4m-uEcLhaRQLN_Y'  # Hard-coded token
    chat_id = '1385370555'  # Hard-coded chat ID
    
    data = fetch_binance_data(symbol, timeframe)
    if data.empty:
        print("No data fetched.")
        return

    pivot_point, resistance1, support1, resistance2, support2 = calculate_pivot_points(data)
    breakout = detect_breakout(data, resistance1)
    filename = 'pivot_breakout.png'
    plot_pivot_points(data, pivot_point, resistance1, support1, resistance2, support2, breakout, filename)
    
    # Run the async function using asyncio
    asyncio.run(send_image_to_telegram(filename, token, chat_id))

if __name__ == "__main__":
    main()