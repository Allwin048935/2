import ccxt
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import asyncio
from telegram import Bot
from telegram.error import TelegramError
from scipy.signal import argrelextrema

def fetch_binance_data(symbol, timeframe='1h', limit=100):
    try:
        binance = ccxt.binance()
        ohlcv = binance.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
        data = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        data['timestamp'] = pd.to_datetime(data['timestamp'], unit='ms')
        return data
    except Exception as e:
        print(f"Error fetching data: {e}")
        return pd.DataFrame()

def calculate_trendlines(data):
    # Identify local maxima (peaks) and minima (troughs)
    data['high'] = data['high'].astype(float)
    data['low'] = data['low'].astype(float)

    # Find peaks and troughs
    window_size = 10
    data['peaks'] = data.iloc[argrelextrema(data['high'].values, np.greater_equal, order=window_size)[0]]['high']
    data['troughs'] = data.iloc[argrelextrema(data['low'].values, np.less_equal, order=window_size)[0]]['low']

    peaks = data.dropna(subset=['peaks'])
    troughs = data.dropna(subset=['troughs'])

    if len(peaks) < 2 or len(troughs) < 2:
        return None, None

    # Fit trendlines to peaks and troughs
    x_peaks = np.arange(len(peaks))
    y_peaks = peaks['peaks'].values
    fit_peaks = np.polyfit(x_peaks, y_peaks, 1)
    trendline_peaks = np.polyval(fit_peaks, np.arange(len(data)))

    x_troughs = np.arange(len(troughs))
    y_troughs = troughs['troughs'].values
    fit_troughs = np.polyfit(x_troughs, y_troughs, 1)
    trendline_troughs = np.polyval(fit_troughs, np.arange(len(data)))

    return trendline_peaks, trendline_troughs

def detect_breakout(data, resistance):
    breakout = data[data['close'] > resistance]
    return breakout

def plot_trendlines(data, trendline_peaks, trendline_troughs, breakout, filename='triangle_breakout.png'):
    plt.figure(figsize=(12, 6))
    plt.plot(data['timestamp'], data['close'], label='Close Price')
    plt.plot(data['timestamp'], trendline_peaks, label='Resistance Trendline', linestyle='--', color='red')
    plt.plot(data['timestamp'], trendline_troughs, label='Support Trendline', linestyle='--', color='green')
    plt.scatter(breakout['timestamp'], breakout['close'], color='blue', label='Breakout Points')
    plt.xlabel('Timestamp')
    plt.ylabel('Price')
    plt.legend()
    plt.title('Ascending Triangle Breakout Detection')
    plt.savefig(filename)
    plt.show()

async def send_image_to_telegram(filename, token, chat_id):
    bot = Bot(token=token)
    try:
        with open(filename, 'rb') as photo:
            await bot.send_photo(chat_id=chat_id, photo=photo)
    except TelegramError as e:
        print(f"Error sending image to Telegram: {e}")

def main():
    symbol = 'BTC/USDT'
    timeframe = '1h'
    token = '7426543281:AAHu4Qf_KT6sGBaqUJU5ccFKZroHKrVc9R0'  # Hard-coded token
    chat_id = '1385370555'  # Hard-coded chat ID
    
    data = fetch_binance_data(symbol, timeframe)
    if data.empty:
        print("No data fetched.")
        return

    trendline_peaks, trendline_troughs = calculate_trendlines(data)
    if trendline_peaks is None or trendline_troughs is None:
        print("Not enough data to calculate trendlines.")
        return

    # Use the latest resistance level (from the peak trendline) as the breakout level
    resistance = trendline_peaks[-1]
    breakout = detect_breakout(data, resistance)
    filename = 'triangle_breakout.png'
    plot_trendlines(data, trendline_peaks, trendline_troughs, breakout, filename)
    
    # Run the async function using asyncio
    asyncio.run(send_image_to_telegram(filename, token, chat_id))

if __name__ == "__main__":
    main()