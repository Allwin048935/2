import ccxt
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import asyncio
from telegram import Bot
from telegram.error import TelegramError

def fetch_binance_data(symbol, timeframe='1h', limit=100):
    try:
        binance = ccxt.binance()
        ohlcv = binance.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
        data = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        data['timestamp'] = pd.to_datetime(data['timestamp'], unit='ms')
        return data
    except Exception as e:
        print(f"Error fetching data: {e}")
        return pd.DataFrame()

def identify_significant_points(data, column='close'):
    highs = data[column] > data[column].shift(1)
    lows = data[column] < data[column].shift(1)
    
    significant_highs = data[highs & (data[column] > data[column].shift(-1))]
    significant_lows = data[lows & (data[column] < data[column].shift(-1))]
    
    significant_points = pd.concat([significant_highs, significant_lows])
    significant_points = significant_points.sort_index()
    
    return significant_points

def calculate_trendline(data, points, column='close'):
    x = np.array([data.index.get_loc(p) for p in points.index])
    y = points[column].values
    fit = np.polyfit(x, y, 1)
    trendline = np.polyval(fit, np.arange(len(data)))
    return trendline

def detect_breakout_breakdown(data, trendlines, breakout_threshold=0.02, breakdown_threshold=0.02):
    breakout_points = []
    breakdown_points = []
    
    for trendline in trendlines:
        breakout = data[data['close'] > trendline * (1 + breakout_threshold)]
        breakdown = data[data['close'] < trendline * (1 - breakdown_threshold)]
        breakout_points.append(breakout)
        breakdown_points.append(breakdown)
    
    return breakout_points, breakdown_points

def plot_trendlines(data, trendlines, breakout_points, breakdown_points, filename='trendline_breakout.png'):
    plt.figure(figsize=(12, 6))
    plt.plot(data['timestamp'], data['close'], label='Close Price')
    
    # Plot each trendline
    for trendline in trendlines:
        plt.plot(data['timestamp'], trendline, linestyle='--', alpha=0.7)
    
    # Plot breakout and breakdown points for each trendline
    colors = ['green', 'blue', 'red']
    for i, (breakout, breakdown) in enumerate(zip(breakout_points, breakdown_points)):
        plt.scatter(breakout['timestamp'], breakout['close'], color=colors[i % len(colors)], label=f'Breakout Points {i+1}')
        plt.scatter(breakdown['timestamp'], breakdown['close'], color=colors[i % len(colors)], marker='x', label=f'Breakdown Points {i+1}')
    
    plt.xlabel('Timestamp')
    plt.ylabel('Price')
    plt.legend()
    plt.title('Multiple Trendlines with Breakout and Breakdown Detection')
    plt.savefig(filename)
    plt.show()

async def send_image_to_telegram(filename, token, chat_id):
    bot = Bot(token=token)
    try:
        with open(filename, 'rb') as photo:
            await bot.send_photo(chat_id=chat_id, photo=photo)
    except TelegramError as e:
        print(f"Error sending image to Telegram: {e}")

def main():
    symbol = 'BTC/USDT'
    timeframe = '1h'
    token = '7124807761:AAFeEIuLTN1VzLyunmVU4m-uEcLhaRQLN_Y'  # Hard-coded token
    chat_id = '1385370555'  # Hard-coded chat ID
    
    data = fetch_binance_data(symbol, timeframe)
    if data.empty:
        print("No data fetched.")
        return

    significant_points = identify_significant_points(data)
    
    if len(significant_points) < 3:
        print("Not enough significant points to create trendlines.")
        return
    
    # Split significant points into groups for multiple trendlines
    num_trendlines = 3  # Number of trendlines you want to create
    trendlines = []
    breakout_points = []
    breakdown_points = []
    
    for i in range(num_trendlines):
        start = i * len(significant_points) // num_trendlines
        end = (i + 1) * len(significant_points) // num_trendlines
        selected_points = significant_points.iloc[start:end]
        
        if len(selected_points) < 3:
            continue
        
        trendline = calculate_trendline(data, selected_points)
        trendlines.append(trendline)
    
    breakout_points, breakdown_points = detect_breakout_breakdown(data, trendlines)
    filename = 'trendline_breakout.png'
    plot_trendlines(data, trendlines, breakout_points, breakdown_points, filename)
    
    # Run the async function using asyncio
    asyncio.run(send_image_to_telegram(filename, token, chat_id))

if __name__ == "__main__":
    main()